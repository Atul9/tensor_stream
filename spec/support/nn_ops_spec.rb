RSpec.shared_examples "standard nn ops evaluator" do
  extend SupportedOp

  let(:ts) { TensorStream }

  before(:each) do
    TensorStream::Tensor.reset_counters
    TensorStream::Operation.reset_counters
    tf.reset_default_graph
    sess.clear_session_cache
  end

  supported_op ".conv2d" do
    context "rgb" do
      # 2 RGB images
      let(:image) do
        [
          [[[0.14, 0.47, 0.20], [0.96, 0.10, 0.59], [0.65, 0.954, 0.023], [0.9461, 0.52, 0.701]],
          [[0.83, 0.101, 0.21], [0.91, 0.87, 0.96], [0.30, 0.01, 0.07], [0.95, 0.81, 0.36]],
          [[0.07, 0.95, 0.84], [0.23, 0.22, 0.68], [0.017, 0.16, 0.67], [0.78, 0.33, 0.51]],
          [[0.13, 0.77, 0.54], [0.65, 0.34, 0.19], [0.601, 0.41, 0.31], [0.26, 0.33, 0.07]]],

          [[[0.1, 0.47, 0.20], [0.5, 0.10, 0.59], [0.65, 0.954, 0.1], [0.9461, 0.2, 0.3]],
          [[0.2, 0.101, 0.21], [0.9, 0.87, 0.96], [0.30, 0.01, 0.07], [0.95, 0.81, 0.36]],
          [[0.3, 0.95, 0.84], [0.23, 0.22, 0.68], [0.017, 0.2, 0.67], [0.1, 0.33, 0.8]],
          [[0.13, 0.77, 0.54], [0.65, 0.34, 0.19], [0.601, 0.41, 0.9], [0.26, 0.33, 0.1]]]
        ].t
      end

      let(:sample_filter) do
        [
         [[[0.97, 0.38, 0.62], [0.88, 0.16, 0.899], [0.87, 0.06, 0.06]], [[0.14, 0.47, 0.33], [0.83, 0.095, 0.04], [0.47, 0.16, 0.29]]],
         [[[0.79, 0.55, 0.24], [0.075, 0.84, 0.77], [0.40, 0.72, 0.55]], [[0.43, 0.05, 0.42], [0.16, 0.62, 0.31], [0.07, 0.94, 0.99]]]
        ].t
      end

      it "calculates for convultion on a 2d image" do
        conv = ts.nn.conv2d(image, sample_filter, [1, 1, 1, 1], 'SAME')
        expect(image.shape.shape).to eq([2, 4, 4, 3])
        expect(sample_filter.shape.shape).to eq([2, 2, 3, 3])
        expect(conv.shape.shape).to eq([2, 4, 4, 3])
        result = sess.run(conv)

        expect(tr(result,2)).to eq([[[[2.56, 2.88, 3.01], [3.73, 2.83, 2.59], [3.21, 2.12, 2.92], [2.94, 1.95, 2.15]],
          [[3.02, 3.24, 3.28], [3.12, 2.23, 2.84], [2.05, 2.05, 2.08], [2.79, 1.59, 2.06]],
          [[2.89, 2.0, 2.72], [2.42, 1.65, 1.8], [2.16, 1.73, 1.52], [1.75, 0.85, 1.17]],
          [[1.74, 0.57, 1.09], [1.67, 0.68, 1.02], [1.56, 0.48, 0.88], [0.6, 0.16, 0.46]]],
         [[[1.96, 2.3, 2.68], [3.31, 2.66, 2.33], [2.83, 2.03, 2.8], [2.31, 1.87, 1.83]],
          [[2.59, 3.12, 2.94], [3.11, 2.25, 2.85], [1.78, 2.32, 2.11], [2.37, 1.42, 2.06]],
          [[3.12, 2.08, 2.86], [2.49, 2.21, 2.38], [2.48, 1.92, 1.77], [1.35, 0.63, 0.78]],
          [[1.74, 0.57, 1.09], [1.94, 0.78, 1.2], [2.08, 0.52, 0.92], [0.63, 0.16, 0.46]]]])
      end

      specify "gradients" do
        conv = ts.nn.conv2d(image, sample_filter, [1, 1, 1, 1], 'SAME')
        g = ts.gradients(conv, [image, sample_filter])
        result = sess.run(g)

        expect(tr(result)).to eq([
          [
            [
              [[1.97, 1.939, 0.99], [2.91, 2.904, 1.91], [2.91, 2.904, 1.91], [2.91, 2.904, 1.91]],
              [[3.55, 3.624, 2.66], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58]],
              [[3.55, 3.624, 2.66], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58]],
              [[3.55, 3.624, 2.66], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58]]
            ],
            [
              [[1.97, 1.939, 0.99], [2.91, 2.904, 1.91], [2.91, 2.904, 1.91], [2.91, 2.904, 1.91]],
              [[3.55, 3.624, 2.66], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58]],
              [[3.55, 3.624, 2.66], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58]],
              [[3.55, 3.624, 2.66], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58], [5.39, 5.679, 5.58]]
            ]
          ],
          [
            [
              [[15.2582, 15.2582, 15.2582], [14.41, 14.41, 14.41], [14.434, 14.434, 14.434]],
              [[13.3582, 13.3582, 13.3582], [9.828, 9.828, 9.828], [10.854, 10.854, 10.854]]
            ],
            [
              [[10.366, 10.366, 10.366], [10.642, 10.642, 10.642], [11.73, 11.73, 11.73]],
              [[8.706, 8.706, 8.706], [7.0, 7.0, 7.0], [8.55, 8.55, 8.55]]
            ]
          ]
        ])
      end
    end

    context "grayscale" do
      let(:image) do
        [
          [
            [[0.92], [0.58], [0.62], [0.98]],
            [[0.61], [0.56], [0.08], [0.99]],
            [[0.98], [0.18], [0.031], [0.74]],
            [[0.769], [0.79], [0.42], [0.057]]
          ],
          [
            [[0.63], [0.62], [0.10], [0.83]],
            [[0.808], [0.44], [0.67], [0.12]],
            [[0.21], [0.52], [0.19], [0.40]],
            [[0.04], [0.37], [0.51], [0.75]]
          ]
        ].t
      end

      let(:sample_filter) do
          [
            [[ [1.0] ], [ [0.5] ]],
            [[ [0.0] ], [ [0.2] ]],
          ].t
      end

      let(:sample_filter_2) do
        [
          [[ [1.0, 1.0] ], [ [0.5, 1.0] ]],
          [[ [0.0, 0.0] ], [ [0.2, 0.1] ]],
        ].t
    end

      specify do
        expect(image.shape.shape).to eq([2, 4, 4, 1])
        expect(sample_filter.shape.shape).to eq([2, 2, 1, 1])
        conv = ts.nn.conv2d(image, sample_filter, [1, 1, 1, 1], 'SAME')
        expect(conv.shape.shape).to eq([2, 4, 4, 1])
        result = sess.run(conv)

        expect(tr(result)).to eq([
          [
            [[1.322], [0.906], [1.308], [0.98]],
            [[0.926], [0.6062], [0.723], [0.99]],
            [[1.228], [0.2795], [0.4124], [0.74]],
            [[1.164], [1.0], [0.4485], [0.057]]
          ],
          [
            [[1.028], [0.804], [0.539], [0.83]],
            [[1.132], [0.813], [0.81], [0.12]],
            [[0.544], [0.717], [0.54], [0.4]],
            [[0.225], [0.625], [0.885], [0.75]]]
          ])

        conv = ts.nn.conv2d(image, sample_filter_2, [1, 1, 1, 1], 'SAME')
        result = sess.run(conv)
        expect(result.shape).to eq([2, 4, 4, 2])

        expect(tr(result)).to eq([
          [[[1.322, 1.556], [0.906, 1.208], [1.308, 1.699], [0.98, 0.98]],
           [[0.926, 1.188], [0.6062, 0.6431], [0.723, 1.144], [0.99, 0.99]],
          [[1.228, 1.239], [0.2795, 0.253], [0.4124, 0.7767], [0.74, 0.74]],
          [[1.164, 1.559], [1.0, 1.21], [0.4485, 0.477], [0.057, 0.057]]],
         [[[1.028, 1.294], [0.804, 0.787], [0.539, 0.942], [0.83, 0.83]],
          [[1.132, 1.3], [0.813, 1.129], [0.81, 0.83], [0.12, 0.12]],
          [[0.544, 0.767], [0.717, 0.761], [0.54, 0.665], [0.4, 0.4]],
          [[0.225, 0.41], [0.625, 0.88], [0.885, 1.26], [0.75, 0.75]]]])
      end

      specify "strides" do
        conv = ts.nn.conv2d(image, sample_filter_2, [1, 2, 2, 1], 'SAME')
        result = sess.run(conv)
        expect(tr(result)).to eq([
          [
            [[1.322, 1.556], [1.308, 1.699]], [[1.228, 1.239], [0.4124, 0.7767]]
          ],
          [
            [[1.028, 1.294], [0.539, 0.942]], [[0.544, 0.767], [0.54, 0.665]]
          ]
        ])

        conv = ts.nn.conv2d(image, sample_filter_2, [1, 1, 2, 1], 'SAME')
        result = sess.run(conv)
        expect(tr(result)).to eq([
          [
            [[1.322, 1.556], [1.308, 1.699]],
            [[0.926, 1.188], [0.723, 1.144]],
            [[1.228, 1.239], [0.4124, 0.7767]
          ],
          [
            [1.164, 1.559], [0.4485, 0.477]]],
            [[[1.028, 1.294], [0.539, 0.942]],
            [[1.132, 1.3], [0.81, 0.83]],
            [[0.544, 0.767], [0.54, 0.665]],
            [[0.225, 0.41], [0.885, 1.26]]
          ]
        ])
      end

      specify "gradient" do
        conv = ts.nn.conv2d(image, sample_filter, [1, 1, 1, 1], 'SAME')
        g = tf.gradients(conv, [image, sample_filter])
        result = sess.run(g)
        expect(tr(result)).to eq([
          [
            [
              [[1.0],[1.5],[1.5],[1.5]],
              [[1.0 ],[1.7],[1.7],[1.7]],
              [[1.0 ],[1.7],[1.7],[1.7]],
              [[1.0 ],[1.7],[1.7],[1.7]]
            ],
            [
              [[1.0 ],[1.5],[1.5],[1.5]],
              [[1.0 ],[1.7],[1.7],[1.7]],
              [[1.0 ],[1.7],[1.7],[1.7]],
              [[1.0 ],[1.7],[1.7],[1.7]]
            ]
          ],
          [
            [
              [[16.515]],[[11.548]]
            ],
            [
              [[11.235]],[[ 7.818]]
            ]
          ]
        ])

        conv = ts.nn.conv2d(image, sample_filter_2, [1, 1, 1, 1], 'SAME')
        g = tf.gradients(conv, [image, sample_filter_2])
        result = sess.run(g)

        expect(tr(result)).to eq([
          [
            [
              [[2.0], [3.5], [3.5], [3.5]],
              [[2.0], [3.8], [3.8], [3.8]],
              [[2.0], [3.8], [3.8], [3.8]],
              [[2.0], [3.8], [3.8], [3.8]]
            ],
            [
              [[2.0], [3.5], [3.5], [3.5]],
              [[2.0], [3.8], [3.8], [3.8]],
              [[2.0], [3.8], [3.8], [3.8]],
              [[2.0], [3.8], [3.8], [3.8]]
            ]
          ],
          [
            [
              [[16.515, 16.515]],
              [[11.548, 11.548]]
            ],
            [
              [[11.235, 11.235]],
              [[7.818, 7.818]]
            ]
          ]
        ])
      end
    end
  end
end